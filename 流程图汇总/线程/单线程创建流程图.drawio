<mxfile host="65bd71144e">
    <diagram id="XVHUciTLL9wrwaslb7kZ" name="Page-1">
        <mxGraphModel dx="371" dy="320" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="20" style="edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="2" target="3">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="2" value="【main.c】 //注意！main函数是内核入口&lt;br&gt;void k_thread_a(void*);&amp;nbsp; //声明一个目标函数，该函数将被作为参数传入线程创建函数中&lt;br&gt;&lt;br&gt;int main(void) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;//创建新线程&lt;br&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;thread_start(&quot;k_thread_a&quot;, 31, k_thread_a, &quot;argA &quot;);&lt;br&gt;&lt;br&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;while(1);&lt;br&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;return 0;&lt;br&gt;}&lt;br&gt;&lt;br&gt;void k_thread_a(void* arg) {&amp;nbsp; //在线程中运行的函数实例&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;void* 表示通用参数，&lt;/span&gt;该&lt;span style=&quot;white-space: pre;&quot;&gt;函数接受通用参数后自行转换&#9;&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;char* para = arg;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;while(1) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;put_str(para);&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;}&lt;br&gt;&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="662" width="326" height="320" as="geometry"/>
                </mxCell>
                <mxCell id="21" style="edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="3" target="4">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="22" style="edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="3" target="5">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="23" style="edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="3" target="6">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="【thread.c】 //创建线程函数&lt;br&gt;struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {&lt;br&gt;//name:线程名，prio:优先级，function：所执行函数，func_arg：给所执行函数传入的参数&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;struct task_struct* thread = get_kernel_pages(1); //从内核内存池申请一页用作线程PCB&lt;br&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;init_thread(thread, name, prio);&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;thread_create(thread, function, func_arg);&lt;br&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;asm volatile(&quot;movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret&quot; : : &quot;g&quot;(thread-&amp;gt;self_kstack) : &quot;memory&quot;);&amp;nbsp; //按照线程栈内的存储顺序，pop出四个寄存器，再使用ret将eip寄存器指向待执行函数function，由于function是函数，因此在执行时会认为当前esp指针指向的是调用自己的函数的返回地址，因此默认从跳过该内存获取参数，因此function再利用内核栈，获取到参数从而执行目标函数(打印字符串)。&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;return thread;&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="575" y="350" width="500" height="230" as="geometry"/>
                </mxCell>
                <mxCell id="4" value="【thread.h】//process or thread's PCB(program control block)&lt;br&gt;struct task_struct {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;uint32_t* self_kstack;&amp;nbsp; &amp;nbsp;//各内核线程都是用自己的内核栈&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;enum task_status status;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;uint8_t priority;&amp;nbsp; //线程优先级&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;char name[16];&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;uint32_t stack_magic;&amp;nbsp; //栈的边界标记，用于检测栈溢出&lt;br&gt;};" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="170" y="390" width="330" height="150" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="【thread.c】 //对进程的PCB基础信息进行初始化&lt;br&gt;void init_thread(struct task_struct* pthread, char* name, int prio) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;pthread-&amp;gt;self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);&lt;br&gt;&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="390" y="640" width="380" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="24" style="edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="6" target="19">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="【thread.c】 //对PCB中的线程栈内信息进行初始化&lt;br&gt;void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;struct thread_stack* kthread_stack = (struct thread_stack*)pthread-&amp;gt;self_kstack;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;//注意，结构体属于数据，数据在PCB中的存储顺序是从低地址到高地址的(栈相反)。&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="810" y="640" width="490" height="100" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="The top of page" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="1360" y="630" width="150" height="120" as="geometry">
                        <mxRectangle x="1150" y="300" width="120" height="30" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="8" value="intr_stack" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="7" vertex="1">
                    <mxGeometry y="30" width="150" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="thread_stack" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="7" vertex="1">
                    <mxGeometry y="60" width="150" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="Item 3" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="7" vertex="1">
                    <mxGeometry y="90" width="150" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="13" value="" style="shape=singleArrow;direction=west;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="1510" y="710" width="100" height="10" as="geometry"/>
                </mxCell>
                <mxCell id="18" value="self_kstack" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="1540" y="690" width="60" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="19" value="【thread.h】&amp;nbsp;&lt;br&gt;struct thread_stack {&amp;nbsp; //在内存中，各数据存储顺序是从低地址到高地址，因此四个寄存器值在低地址，func_arg在高地址&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;uint32_t ebp;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;......//四个通用寄存器&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;void (*eip)(thread_func* func, void* func_arg);&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;void (*unused_retaddr); //占位符，用于模拟调用call时压入的返回地址&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;thread_func* function;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;void* func_arg;&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
                    <mxGeometry x="855" y="800" width="400" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="25" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.40800933837890624;arrowSize=0.7047462463378906;" vertex="1" parent="1">
                    <mxGeometry x="1310" y="675" width="40" height="30" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>